---
title: "projects"
format: html
---

R PROJECT

Outline

Laptop Specs 2024 dataset: <https://www.kaggle.com/datasets/pradeepjangirml007/laptop-data-set/data> 

CPU performance dataset: <https://www.cpubenchmark.net/cpu_list.php> 

GPU performance dataset: <https://www.videocardbenchmark.net/gpu_list.php> 

Scoring for each variable

-   CPU Mark = raw mark score

-   RAM =  100=4GB, 200=8GB, 300=16GB, 400=32GB, 500=64GB

-   GPU Mark = raw mark score

-   Hard Drive Storage = 100 for HDD, 200 for Combo, 300 for SSD + 1 point for each 100GB of storage

-   

Maximum Component Score Calculations

-   CPU Mark = 176418

-   RAM = 500

-   GPU = 42305

-   Hard Drive = 320

Normalizing Scores

Normalized Score =  Component Score/Maximum Component Score x 100

Weights for performance grade algorithm for productivity/workstation audience

1.  CPU Norm.Score  x 35%

<!-- -->

2.  RAM Norm.Score  x 30%

<!-- -->

3.  GPU Norm.Score  x 20%

<!-- -->

4.  Hard Drive Norm.Scorex 15%

Final Algorithm

CPU norm.weight.score 

\+

RAM norm.weight.score

\+

GPU norm.weight.score

\+

Harddrive norm.weight.score

=

Performance Grade

------------------------------------------------------------------------

```{r}library(tidyverse)}
#setting up datasets
laptop <- read_csv("data/laptop.csv")
view(laptop)
cpu <- read_csv("data/cpu.csv")
view(cpu)
gpu <- read_csv("data/gpu.csv")
view(gpu)
#standarizing cpu and gpu names in laptop.csv
##the functions and code were made with help from AI
###hrs of my learning,writing own code, and debugging, not in a copy and paste method
laptop_clean <- laptop |>
  mutate(
     cpu_block = str_extract(Processor_Name, "Intel Core i[3579]"), 
     generation = case_when(
       str_detect(Processor_Name, "([0-9]+)th") ~ str_extract(Processor_Name, "([0-9]{1,2})"),
       TRUE ~ NA_character_
    ),
    cleaned_cpu = paste(cpu_block, generation, sep = "-") |>
      str_trim())
    
#cleaning the cpu mark dataset for merge
cpu_clean_data <- cpu |>
  mutate(cpu_block = str_extract(`CPU Name`, "Intel Core i[3579]"), 
    generation = case_when(
      str_detect(`CPU Name`, "i[3579]-([0-9]{1,2})") ~ str_extract(`CPU Name`, "([0-9]{1})"),
      TRUE ~ NA_character_
    ),
    cleaned_cpu = paste(cpu_block, generation, sep = "-")
    )|>
  select(cleaned_cpu, `CPU Mark
`) |>
  distinct(cleaned_cpu, .keep_all = TRUE)
#merging finally
merged_data <- laptop_clean |>
  left_join(cpu_clean_data, by = "cleaned_cpu")
merged_data <-
  merged_data |>
  rename(cpu_mark = `CPU Mark
         `)
#max and weighing formulas!
#

max_scores <- list(
  cpu = 60600,
  ram = 500,
  hard_drive = 3
)

weights <- list(
  cpu = .7, 
  ram = .3, 
  harddrive = .18
)
final_data <- merged_data |>
  mutate(
    ram_score = case_when(
      RAM == "4 GB" ~ 100,
      RAM == "8 GB" ~ 200,
      RAM == "16 GB" ~ 300,
      RAM == "32 GB" ~ 400,
      RAM == "64 GB" ~ 500,
      TRUE ~ 0
    ),
    hard_drive_score = case_when(
      SSD == "1024 GB SSD Storage" ~ 1,
      SSD == "2048 GB SSD Storage" ~ 2,
      SSD == "512 GB SSD Storage" ~ 0.5,
      TRUE ~ 0),
cpu_norm = (cpu_mark / max_scores$cpu) * 100,
ram_norm = (ram_score / max_scores$ram) * 100,
cpu_weighted = cpu_norm * weights$cpu,
ram_weighted = ram_norm * weights$ram,
Performance_Grade = cpu_weighted + ram_weighted
)

library(ggplot2)  
ggplot(data = final_data, aes(x = Price, y = Performance_Grade)) + geom_point()

```

------------------------------------------------------------------------

![](Rplot.png)
